# TN Films Photography/Videography Portfolio & CMS - Cursor Rules

## Project Overview
You are working on **TN Films**, a modern photography/videography portfolio website with a comprehensive CMS dashboard. This is a React + TypeScript + Vite project using Supabase as the backend, with a sophisticated dark theme design and glass-morphism effects.

## 🎨 UI/UX Design Principles - NEVER CHANGE THESE

### Color Scheme & Theme
- **Primary Background**: Always use `bg-gray-900` for main backgrounds
- **Card Backgrounds**: Use `bg-gray-800/50` or `bg-gray-800/80` with opacity for cards
- **Text Colors**: 
  - Primary text: `text-white`
  - Secondary text: `text-gray-400` or `text-gray-300`
  - Accent text: Category-specific colors (blue-400, orange-400, green-400)
- **Accent Colors**:
  - Personal: Blue (`bg-blue-500/20`, `text-blue-400`, `border-blue-500/20`)
  - Commercial: Orange (`bg-orange-500/20`, `text-orange-400`, `border-orange-500/20`)
  - Events: Green (`bg-green-500/20`, `text-green-400`, `border-green-500/20`)

### Glass-morphism & Backdrop Effects
- Always use `backdrop-blur-sm`, `backdrop-blur-lg`, or `backdrop-blur-xl` for glass effects
- Combine with opacity overlays like `bg-gray-800/80`
- Add `border border-gray-700/50` or category-specific borders for subtle outlines

### Gradient & Visual Effects
- Use gradient backgrounds: `bg-gradient-to-br from-gray-800/80 to-gray-900/80`
- Gradient overlays: `bg-gradient-to-t from-gray-900/80 via-transparent to-gray-900/60`
- Gradient text: `bg-gradient-to-r from-white via-gray-100 to-gray-300 bg-clip-text text-transparent`
- Blur effects for background elements: `blur-3xl` with low opacity gradients
- Drop shadows: `drop-shadow-lg`, `shadow-2xl`, `shadow-blue-500/20`

### Interactive Elements
- Hover effects: `hover:scale-105`, `hover:bg-gray-700/60`, `hover:border-blue-400/40`
- Transitions: Always use `transition-all duration-300` or `transition-colors duration-300`
- Group hover effects: Use `group` and `group-hover:` for complex animations
- Transform effects: `group-hover:rotate-12`, `group-hover:translate-x-2`

### Layout Patterns
- Use responsive grid: `grid md:grid-cols-2 lg:grid-cols-3 gap-6` or `gap-8`
- Container sizing: `container mx-auto px-6` for main content
- Spacing: Use `space-y-6`, `space-y-8` for vertical spacing
- Card styling: Rounded corners `rounded-2xl` or `rounded-xl`

## 🏗️ Architecture & Code Patterns - ALWAYS FOLLOW

### Component Structure
```typescript
// Always use this pattern for React components
const ComponentName = ({ prop1, prop2 }: ComponentProps) => {
  // 1. Hooks at the top
  const { data, isLoading, error } = useQuery({...});
  const mutation = useMutation({...});
  
  // 2. State declarations
  const [localState, setLocalState] = useState();
  
  // 3. Event handlers
  const handleAction = () => {
    // logic here
  };
  
  // 4. Early returns for loading/error states
  if (error) return <ErrorComponent />;
  if (isLoading) return <LoadingComponent />;
  
  // 5. Main render
  return (
    <div className="consistent-styling">
      {/* Component JSX */}
    </div>
  );
};
```

### Database Service Pattern
- Always use the existing service pattern from `database-service.ts`
- Use `checkConfiguration()` at the start of each service function
- Handle errors with try/catch and meaningful error messages
- Use `maybeSingle()` instead of `single()` to avoid 406 errors
- Return proper TypeScript types

### State Management
- Use React Query for server state: `useQuery`, `useMutation`
- Use `queryClient.invalidateQueries()` after mutations
- Local state with `useState` for UI state only
- Always handle loading, error, and success states

### Form Handling
```typescript
// Always follow this form pattern
const [formData, setFormData] = useState({
  title: "",
  description: "",
  // ... other fields
});

const handleSubmit = (e: React.FormEvent) => {
  e.preventDefault();
  mutation.mutate(formData);
};

const resetForm = () => {
  setFormData({
    title: "",
    description: "",
    // ... reset to defaults
  });
};
```

## 🔧 Technology Stack - NEVER CHANGE

### Core Technologies
- **React 18** with TypeScript
- **Vite** for build tool
- **Tailwind CSS** for styling
- **Supabase** for backend/database
- **React Query** for data fetching
- **React Router** for navigation
- **Shadcn/ui** for base components

### File Upload Strategy
- **Primary**: Direct upload to Supabase Storage via `FileUpload` component
- **Secondary**: Google Drive URL support with automatic conversion
- **Components**: Use `ImageInput` for dual upload/URL mode
- **Storage**: Organize files in folders: `portfolio/`, `gallery/`, `thumbnails/`, `logos/`

## 📁 File Organization - MAINTAIN STRUCTURE

### Component Organization
```
src/
├── components/
│   ├── ui/           # Shadcn base components - DO NOT MODIFY
│   ├── admin/        # CMS admin components
│   └── [feature]/    # Feature-specific components
├── pages/            # Route components
├── lib/              # Utilities and services
├── hooks/            # Custom React hooks
└── types/            # TypeScript type definitions
```

### Import Patterns
```typescript
// Always use path aliases
import { Button } from "@/components/ui/button";
import { portfolioService } from "@/lib/database-service";
import { supabase } from "@/lib/supabase";

// Group imports logically
import React, { useState, useEffect } from "react";
import { useQuery, useMutation } from "@tanstack/react-query";
import { Camera, Edit, Trash2 } from "lucide-react";
```

## 💾 Data Management Patterns

### Portfolio Categories
- **Personal**: Creative/artistic projects (`category: 'personal'`)
- **Commercial**: Business/corporate work (`category: 'commercial'`) 
- **Events**: Weddings/events (`category: 'events'`)
- Use consistent color coding: Blue/Orange/Green

### Database Schema Adherence
```typescript
// Always match these exact interfaces
interface Portfolio {
  id: string;
  title: string;
  description: string;
  category: 'personal' | 'commercial' | 'events';
  image_url: string;
  video_url?: string;
  images?: string[];
  tags: string[];
  featured: boolean;
  status: 'published' | 'draft';
  created_at: string;
  updated_at: string;
}

interface CompanyGallery {
  id: string;
  company_id: string;
  title: string;
  description?: string;
  media_url: string;
  media_type: 'image' | 'video';
  thumbnail_url?: string;
  sort_order: number;
  featured: boolean;
  status: 'published' | 'draft';
  created_at: string;
  updated_at: string;
}
```

### Query Patterns
```typescript
// Always use this pattern for queries
const { data: items = [], isLoading, error } = useQuery({
  queryKey: ['portfolio', category],
  queryFn: () => portfolioService.getAll(category),
  staleTime: 5 * 60 * 1000, // 5 minutes
  enabled: !!someCondition, // Only when condition is met
});

// Mutation pattern
const createMutation = useMutation({
  mutationFn: portfolioService.create,
  onSuccess: () => {
    queryClient.invalidateQueries({ queryKey: ['portfolio'] });
    toast({ title: "Success", description: "Item created successfully." });
    resetForm();
  },
  onError: (error) => {
    toast({
      title: "Error",
      description: `Failed to create: ${error.message}`,
      variant: "destructive",
    });
  }
});
```

## 🎯 UI Component Patterns - FOLLOW EXACTLY

### Loading States
```jsx
// Always use this loading pattern
{isLoading ? (
  <div className="grid md:grid-cols-2 lg:grid-cols-3 gap-6">
    {[...Array(6)].map((_, i) => (
      <Card key={i} className="bg-gray-800/50 border-gray-700 animate-pulse">
        <div className="aspect-video bg-gray-700 rounded-t-lg" />
        <CardContent className="p-4">
          <div className="h-4 bg-gray-700 rounded mb-2" />
          <div className="h-3 bg-gray-700 rounded w-2/3" />
        </CardContent>
      </Card>
    ))}
  </div>
) : (
  // Actual content
)}
```

### Empty States
```jsx
// Always use this empty state pattern
<Card className="bg-gray-800/50 border-gray-700">
  <CardContent className="py-16">
    <div className="text-center">
      <div className="w-20 h-20 bg-blue-500/20 rounded-xl mx-auto mb-6 flex items-center justify-center">
        <Icon className="w-10 h-10 text-blue-400" />
      </div>
      <h3 className="text-2xl font-semibold text-white mb-3">No Items Yet</h3>
      <p className="text-gray-400 mb-8 max-w-md mx-auto">
        Description text here
      </p>
      <Button className="bg-blue-600 hover:bg-blue-700">
        <Plus className="w-4 h-4 mr-2" />
        Create First Item
      </Button>
    </div>
  </CardContent>
</Card>
```

### Card Hover Effects
```jsx
// Always use this card pattern with hover effects
<Card className="bg-gray-800/50 border-gray-700 hover:bg-gray-800/70 transition-all duration-300 group hover:scale-105">
  <div className="relative aspect-video rounded-t-lg overflow-hidden">
    <img src={item.image_url} className="w-full h-full object-cover transition-transform duration-300 group-hover:scale-110" />
    
    {/* Overlay with actions */}
    <div className="absolute inset-0 bg-gradient-to-t from-black/80 via-black/20 to-transparent opacity-0 group-hover:opacity-100 transition-all duration-300 flex items-end justify-center pb-4">
      <div className="flex space-x-2">
        <Button size="sm" className="bg-blue-600/90 hover:bg-blue-600 text-white border-0 backdrop-blur-sm">
          <Edit className="w-4 h-4 mr-2" />
          Edit
        </Button>
      </div>
    </div>
    
    {/* Status badges */}
    <div className="absolute top-3 left-3 flex gap-2">
      {item.featured && (
        <span className="px-3 py-1 bg-yellow-500/90 text-yellow-900 text-xs rounded-full flex items-center gap-1 font-medium backdrop-blur-sm">
          <Star className="w-3 h-3" />
          Featured
        </span>
      )}
    </div>
  </div>
</Card>
```

### Modal/Dialog Pattern
```jsx
<Dialog open={isDialogOpen} onOpenChange={setIsDialogOpen}>
  <DialogContent className="bg-gray-800 border-gray-700 max-w-4xl max-h-[90vh] overflow-y-auto">
    <DialogHeader>
      <DialogTitle className="text-white text-2xl">Modal Title</DialogTitle>
      <DialogDescription className="text-gray-400">Description</DialogDescription>
    </DialogHeader>
    
    <form onSubmit={handleSubmit} className="space-y-8">
      {/* Form content */}
      <div className="flex justify-end space-x-3 pt-6 border-t border-gray-700">
        <Button type="button" variant="outline" onClick={resetForm} className="border-gray-600 text-gray-300 hover:bg-gray-700">
          Cancel
        </Button>
        <Button type="submit" className="bg-blue-600 hover:bg-blue-700">
          <Save className="w-4 h-4 mr-2" />
          Save
        </Button>
      </div>
    </form>
  </DialogContent>
</Dialog>
```

## 🚫 CRITICAL DON'Ts

### Design Don'ts
- NEVER use light theme colors or backgrounds
- NEVER change the glass-morphism style to solid colors
- NEVER use different color schemes for categories (stick to blue/orange/green)
- NEVER remove backdrop-blur effects
- NEVER use different border radius patterns (stick to rounded-xl/rounded-2xl)

### Code Don'ts
- NEVER use `fetch()` directly - always use the service layer
- NEVER use `single()` for Supabase queries - use `maybeSingle()`
- NEVER modify the database schema without updating TypeScript interfaces
- NEVER hardcode URLs or keys - use environment variables
- NEVER skip error handling in async operations

### Component Don'ts
- NEVER modify shadcn/ui base components directly
- NEVER create components without proper TypeScript typing
- NEVER forget loading and error states
- NEVER use inline styles instead of Tailwind classes
- NEVER create forms without proper validation

## ✅ When Adding New Features

### Always Include
1. **Loading states** with skeleton animations
2. **Error boundaries** with meaningful messages
3. **Empty states** with call-to-action buttons
4. **TypeScript interfaces** for all data structures
5. **Responsive design** using Tailwind responsive prefixes
6. **Hover effects** and smooth transitions
7. **Glass-morphism styling** consistent with existing design
8. **Proper error handling** in service layer

### File Upload Features
- Always use `ImageInput` component for dual upload/URL support
- Support Google Drive URL auto-conversion
- Include proper file validation (size, type)
- Use Supabase Storage with organized folder structure
- Provide upload progress indicators

### CMS Features
- Always include status management (published/draft)
- Featured item toggle functionality
- Sort order controls
- Category-specific color coding
- Proper data validation before saving

## 🌐 Multi-language Support
- Use the existing content management pattern with fallbacks
- Always provide Vietnamese (vi) and English (en) versions
- Use `getContentWithFallback()` helper function
- Store translatable content in the CMS, not hardcoded

## 🔒 Security & Performance
- Always validate file uploads (type, size)
- Use Row Level Security (RLS) patterns from existing code
- Implement proper error handling without exposing sensitive data
- Use React Query for caching and performance optimization
- Lazy load images with proper fallbacks

This document should be your single source of truth for maintaining consistency with the existing TN Films codebase. Every new feature should follow these established patterns exactly. 